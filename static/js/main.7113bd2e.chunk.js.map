{"version":3,"sources":["data/P_Icon_V02.png","data/Wheel.png","components/Circle.js","components/ChangingText.js","parkingApi.js","TestCoordsInput.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["stateToIcon","state","YesAnimation","NoAnimation","HoppsanAnimation","LoadingContainer","styled","div","Image","img","rotate","keyframes","Spinner","Circle","options","animationData","loop","autoplay","View","useLottie","src","ParkingIcon","alt","Wheel","Text","p","fading","ChangingText","className","content","useState","text","setText","setFading","useEffect","console","log","setTimeout","LargeText","MediumText","PROXY_URL","API_URL","API_KEY","process","REACT_APP_PARKING_API_KEY","fetchJsonWithProxy","requestUrl","a","fetch","result","json","proxyData","data","JSON","parse","contents","error","latitude","longitude","radius","request","encodeURIComponent","TestStreetInput","parkingInfo","setParkingInfo","getSpacesByCoords","then","response","vehicleSpaces","features","filter","el","properties","VEHICLE","length","map","ADDRESS","FEATURE_OBJECT_ID","colors","Container","SymbolContainer","pending","App","coords","setCoords","setState","navigator","geolocation","watchPosition","geo","accuracy","speed","tabIndex","onKeyDown","e","key","copy","style","minHeight","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"gy7DAAe,MAA0B,uCCA1B,MAA0B,kC,OCQnCA,EAAc,SAACC,GACnB,OAAQA,GACN,IAAK,MACH,OAAOC,EACT,IAAK,KACH,OAAOC,EACT,IAAK,QACH,OAAOC,EACT,QACE,MAAO,KAIPC,EAAmBC,IAAOC,IAAV,mDAIhBC,EAAQF,IAAOG,IAAV,iEAKLC,EAASC,YAAH,yHAUNC,EAAUN,YAAOE,EAAPF,CAAH,oGAGEI,GAuBAG,EApBA,SAAC,GAAe,IAAbZ,EAAY,EAAZA,MACVa,EAAU,CACdC,cAAef,EAAYC,GAC3Be,MAAM,EACNC,UAAU,GAIJC,EAASC,oBAAUL,GAAnBI,KAER,MAAc,YAAVjB,EACK,eAACI,EAAD,WACL,cAACG,EAAD,CAAOY,IAAKC,EAAaC,IAAI,KAC7B,cAACV,EAAD,CAASQ,IAAKG,EAAOD,IAAI,QAItBJ,GC5DHM,EAAOlB,IAAOmB,EAAV,wFAGG,qBAAGC,OAAsB,EAAI,KAGpCC,EAAe,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,QAAc,EACvBC,mBAAS,MADc,mBACxCC,EADwC,KAClCC,EADkC,OAEnBF,oBAAS,GAFU,mBAExCJ,EAFwC,KAEhCO,EAFgC,KAe/C,OAXAC,qBAAU,WACRC,QAAQC,IAAIP,GACC,OAATE,EACFC,EAAQH,IAERI,GAAU,GACVI,YAAW,kBAAML,EAAQH,KAAU,KACnCQ,YAAW,kBAAMJ,GAAU,KAAQ,QAEpC,CAACJ,IAEG,cAACL,EAAD,CAAMI,UAAWA,EAAWF,OAAQA,EAApC,SAA6CK,KAGzCO,EAAYhC,YAAOqB,EAAPrB,CAAH,8EAITiC,EAAajC,YAAOqB,EAAPrB,CAAH,8E,GAIEA,YAAOqB,EAAPrB,CAAH,gD,qCCnChBkC,EAAY,sCACZC,EAAU,iDACVC,EAAUC,mJAAYC,0B,SAEbC,E,8EAAf,WAAkCC,GAAlC,mBAAAC,EAAA,+EAEyBC,MAAMR,EAAYM,GAF3C,cAEUG,EAFV,gBAG4BA,EAAOC,OAHnC,cAGUC,EAHV,OAIUC,EAAOC,KAAKC,MAAMH,EAAUI,UAJtC,kBAKWH,GALX,yCAOIjB,QAAQqB,MAAR,MAPJ,kBAQW,MARX,2D,kEAmBO,WAAiCC,EAAUC,GAA3C,6BAAAX,EAAA,6DAAsDY,EAAtD,+BAA+D,GAC9DC,EAAUC,mBAAmB,GAAD,OAC7BpB,EAD6B,oCACMkB,EADN,gBACoBF,EADpB,gBACoCC,EADpC,qCAC0EhB,IAFvG,SAIQG,EAAmBe,GAJ3B,oF,sBCpBQ,SAASE,EAAT,GAAgE,IAArCL,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,UAA0B,IAAfC,cAAe,MAAN,GAAM,IACtC7B,mBAAS,IAD6B,mBACrEiC,EADqE,KACxDC,EADwD,KAY5E,OATA9B,qBAAU,YDiBL,SAAP,qCChBI+B,CAAkBR,EAAUC,EAAWC,GAAQO,MAAK,SAACC,GACnD,IAAMC,IAAyB,OAARD,QAAQ,IAARA,OAAA,EAAAA,EAAUE,WAAY,IAAIC,QAC/C,SAACC,GAAD,MAAkC,WAA1BA,EAAGC,WAAWC,WAExBT,EAAeI,QAEhB,CAACX,EAAUC,EAAWC,IAEpBI,GAAgBA,EAAYW,OAU/B,gCACE,uEACqCf,EADrC,YACsDF,EADtD,IACiEC,EADjE,OAGCK,EAAYY,KAAI,SAACJ,GAAD,OACf,4BAA0CA,EAAGC,WAAWI,SAAhDL,EAAGC,WAAWK,yBAbxB,8BACE,8DAC4BlB,EAD5B,YAC6CF,EAD7C,IACwDC,EADxD,SCTR,IAAMoB,EACE,UADFA,EAEG,UAFHA,EAGC,UAHDA,EAII,UAJJA,EAKG,UAKHC,EAAYzE,IAAOC,IAAV,yNAGO,YAClB,OADiC,EAAZN,OAEnB,IAAK,MACH,OAAO6E,EACT,IAAK,KACH,OAAOA,EACT,IAAK,QACH,OAAOA,EACT,QACE,OAAOA,KAIJA,GAMLE,GAAkB1E,IAAOC,IAAV,wGACK,YACtB,OADuC,EAAd0E,QAEhB,mBAEF,KAyCIC,OApCf,WAAgB,IAAD,EACepD,mBAAS,MADxB,mBACNqD,EADM,KACEC,EADF,OAEatD,mBAAS,WAFtB,mBAEN7B,EAFM,KAECoF,EAFD,KAWb,OARAnD,qBAAU,WACRoD,UAAUC,YAAYC,eAAc,SAACC,GAAS,IAAD,EACMA,EAAIN,OAA7CzB,EADmC,EACnCA,UAAWD,EADwB,EACxBA,SAAUiC,EADc,EACdA,SAAUC,EADI,EACJA,MACvCP,EAAU,CAAE1B,YAAWD,WAAUiC,WAAUC,UAC3CN,EAAS,SACRlD,QAAQC,OACV,IAGD,cAAC2C,EAAD,CACE9E,MAAOA,EAEP2F,SAAS,IACTC,UAAW,SAAAC,GACK,YAAVA,EAAEC,KAAmBV,EAAS,WACpB,eAAVS,EAAEC,KAAsBV,EAAS,OACvB,cAAVS,EAAEC,KAAqBV,EAAS,MACtB,cAAVS,EAAEC,KAAqBV,EAAS,UARxC,SAWE,eAACL,GAAD,CAAiBC,QAAmB,YAAVhF,EAA1B,UACE,cAACsC,EAAD,CAAYV,QAASmE,EAAK/F,GAAO,KACjC,cAACqC,EAAD,CAAWT,QAASmE,EAAK/F,GAAO,KAChC,cAAC,EAAD,CAAQA,MAAOA,IACf,qBAAKgG,MAAO,CAAEC,UAAW,IAAzB,SAA8B,cAAC3D,EAAD,CAAYV,QAASmE,EAAK/F,GAAO,OAC/D,cAACqC,EAAD,CAAWT,QAASmE,EAAK/F,GAAO,KAE/BkF,GAAU,cAAC,EAAD,CAAiB1B,SAAU0B,EAAO1B,SAAUC,UAAWyB,EAAOzB,kBCrE7DyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBxC,MAAK,YAAkD,IAA/CyC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmB9B,WACrBA,UAAU+B,cAAcC,MACrBpD,MAAK,SAACqD,GACLA,EAAaC,gBAEdC,OAAM,SAACjE,GACNrB,QAAQqB,MAAMA,EAAMkE,YE/G5BlB,M","file":"static/js/main.7113bd2e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/P_Icon_V02.16cd7bf2.png\";","export default __webpack_public_path__ + \"static/media/Wheel.d151e3b2.png\";","import { useLottie } from \"lottie-react\";\nimport styled, { keyframes } from \"styled-components\";\nimport YesAnimation from \"../data/AnimatedYes_Icon_V03.json\";\nimport NoAnimation from \"../data/AnimatedNo_Icon_V02.json\";\nimport HoppsanAnimation from \"../data/AnimatedHoppsan_Icon_V02.json\";\nimport ParkingIcon from \"../data/P_Icon_V02.png\";\nimport Wheel from \"../data/Wheel.png\";\n \nconst stateToIcon = (state) => {\n  switch (state) {\n    case \"YES\":\n      return YesAnimation;\n    case \"NO\":\n      return NoAnimation;\n    case \"MAYBE\":\n      return HoppsanAnimation;\n    default:\n      return \"\";\n  }\n}\n\nconst LoadingContainer = styled.div`\n  position: relative;\n`;\n\nconst Image = styled.img`\n  max-width: 100%;\n  height: auto;\n`;\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(-360deg);\n  }\n`;\n\nconst Spinner = styled(Image)`\n  position: absolute;\n  left: 0;\n  animation: ${rotate} 3s linear infinite;\n`;\n\nconst Circle = ({ state }) => {\n  const options = {\n    animationData: stateToIcon(state),\n    loop: false,\n    autoplay: true,\n    // style: { width: \"80%\" }\n  };\n \n  const { View } = useLottie(options);\n\n  if (state === \"LOADING\") {\n    return <LoadingContainer>\n      <Image src={ParkingIcon} alt=\"\" />\n      <Spinner src={Wheel} alt=\"\" />\n    </LoadingContainer>\n  }\n \n  return View;\n};\n \nexport default Circle;","import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst Text = styled.p`\n  margin: 0;\n  transition: opacity 0.4s;\n  opacity: ${({ fading }) => fading ? 0 : 1};\n`;\n\nconst ChangingText = ({ className, content }) => {\n  const [text, setText] = useState(null);\n  const [fading, setFading] = useState(false);\n\n  useEffect(() => {\n    console.log(content)\n    if (text === null) {\n      setText(content);\n    } else {\n      setFading(true);\n      setTimeout(() => setText(content), 500);\n      setTimeout(() => setFading(false), 600);\n    }\n  }, [content]);\n\n  return <Text className={className} fading={fading}>{text}</Text>\n}\n\nexport const LargeText = styled(ChangingText)`\n  font-size: 30px;\n  text-transform: uppercase;\n`;\nexport const MediumText = styled(ChangingText)`\n  font-size: 16px;\n  text-transform: uppercase;\n`;\nexport const SmallText = styled(ChangingText)`\n  font-size: 12px;\n`;\n","const PROXY_URL = 'https://api.allorigins.win/get?url=';\nconst API_URL = 'https://openparking.stockholm.se/LTF-Tolken/v1';\nconst API_KEY = process.env.REACT_APP_PARKING_API_KEY;\n\nasync function fetchJsonWithProxy(requestUrl) {\n  try {\n    const result = await fetch(PROXY_URL + requestUrl);\n    const proxyData = await result.json();\n    const data = JSON.parse(proxyData.contents);\n    return data;\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n}\n\nexport async function getSpacesByStreet(streetName) {\n  const request = encodeURIComponent(\n    `${API_URL}//ptillaten/street/${streetName}?outputFormat=json&apiKey=${API_KEY}`\n  );\n  return await fetchJsonWithProxy(request);\n}\n\nexport async function getSpacesByCoords(latitude, longitude, radius = 50) {\n  const request = encodeURIComponent(\n    `${API_URL}/ptillaten/within?radius=${radius}&lat=${latitude}&lng=${longitude}&outputFormat=json&apiKey=${API_KEY}`\n  );\n  return await fetchJsonWithProxy(request);\n}\n\nexport async function getServiceInfoByCoords(latitude, longitude, radius = 50) {\n  const request = encodeURIComponent(\n    `${API_URL}/servicedagar/within?radius=${radius}&lat=${latitude}&lng=${longitude}&outputFormat=json&apiKey=${API_KEY}`\n  );\n  return await fetchJsonWithProxy(request);\n}\n\nfunction before(time, comparison) {\n  if (time[0] < comparison[0]) {\n    return true;\n  } else {\n    return time[0] === comparison[0] && time[1] <= comparison[1];\n  }\n}\n\nfunction after(time, comparison) {\n  if (time[0] > comparison[0]) {\n    return true;\n  } else {\n    return time[0] === comparison[0] && time[1] >= comparison[1];\n  }\n}\n\nfunction distanceToOrigin(feature, lat, lng) {\n  const [fLng, fLat] = feature.geometry.coordinates[0];\n  return (lng - fLng) ** 2 + (lat - fLat) ** 2;\n}\n\nfunction cyclicBetween(time, start, end) {\n  if (before(end, start)) {\n    return before(time, end) || after(time, start);\n  } else {\n    return before(time, end) && after(time, start);\n  }\n}\n\nfunction isAllowed(spot, serviceInfo) {\n  const WEEKDAYS = ['söndag', 'måndag', 'tisdag', 'onsdag', 'torsdag', 'fredag', 'lördag'];\n  const isRegulated = spot.VF_PLATS_TYP.contains('Tidsreglerad');\n  const isReserved = spot.VF_PLATS_TYP.contains('Reserverad');\n  if (Object.keys(serviceInfo).length) {\n    const { START_WEEKDAY, START_TIME, END_TIME, START_MONTH, END_MONTH, START_DAY, END_DAY } =\n      serviceInfo;\n    const now = new Date();\n    if (WEEKDAYS[now.getDay()] === START_WEEKDAY) {\n      const startTime = [Math.floor(START_TIME / 100), START_TIME % 100];\n      const endTime = [Math.floor(END_TIME / 100), END_TIME % 100];\n      if (cyclicBetween([now.getHours(), now.getMinutes()], startTime, endTime)) {\n        if (!START_MONTH) return [false, 'Servicetid'];\n        // getMonth indexes from 0...\n        if (\n          cyclicBetween(\n            [now.getMonth() + 1, now.getDate()],\n            [START_MONTH, START_DAY],\n            [END_MONTH, END_DAY]\n          )\n        )\n          return [false, 'Servicetid'];\n      }\n    }\n  }\n  if (isRegulated) return [false, 'Regulerad lastplats'];\n  if (isReserved) return [false, 'Ditt fordon får ej parkera här'];\n  return [true, ''];\n}\n","import React, { useState, useEffect } from 'react';\nimport { getSpacesByCoords } from './parkingApi.js';\n\nexport default function TestStreetInput({ latitude, longitude, radius = 50 }) {\n  const [parkingInfo, setParkingInfo] = useState([]);\n\n  useEffect(() => {\n    getSpacesByCoords(latitude, longitude, radius).then((response) => {\n      const vehicleSpaces = (response?.features || []).filter(\n        (el) => el.properties.VEHICLE === 'fordon'\n      );\n      setParkingInfo(vehicleSpaces);\n    });\n  }, [latitude, longitude, radius]);\n\n  if (!parkingInfo || !parkingInfo.length)\n    return (\n      <div>\n        <label>\n          No parking spaces within {radius} m from ({latitude},{longitude})\n        </label>\n      </div>\n    );\n\n  return (\n    <div>\n      <label>\n        Showing all parking spaces within {radius} m from ({latitude},{longitude})\n      </label>\n      {parkingInfo.map((el) => (\n        <p key={el.properties.FEATURE_OBJECT_ID}>{el.properties.ADDRESS}</p>\n      ))}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport styled from \"styled-components\";\nimport Circle from \"./components/Circle\";\nimport { LargeText, MediumText, SmallText } from './components/ChangingText';\nimport copy from \"./data/texts.json\";\nimport './App.css';\nimport TestStreetInput from './TestStreetInput.jsx';\nimport TestCoordsInput from './TestCoordsInput.jsx';\n\nconst colors = {\n  blue: \"#4296ae\",\n  green: \"#309f5d\",\n  red: \"#bf3838\",\n  yellow: \"#d6ad4f\",\n  white: \"#d4d4d4\"\n}\n\n// state = \"LOADING\" || \"YES\" || \"NO\" || \"MAYBE\"\n\nconst Container = styled.div`\n  box-sizing: border-box;\n  height: 100%;\n  background-color: ${({ state }) => {\n    switch (state) {\n      case \"YES\":\n        return colors.green;\n      case \"NO\":\n        return colors.red;\n      case \"MAYBE\":\n        return colors.yellow;\n      default:\n        return colors.blue;\n    }\n  }};\n  padding: 2rem;\n  color: ${colors.white};\n  font-weight: lighter;\n  text-align: center;\n  font-family: 'Roboto', sans-serif;\n`;\n\nconst SymbolContainer = styled.div`\n  transform: translateY(${({ pending }) => {\n    if (pending) {\n      return \"calc(45vh - 50%)\"\n    }\n    return 0\n  }});\n  transition: transform 0.5s ease-out 0.4s;\n`;\n\nfunction App() {\n  const [coords, setCoords] = useState(null);\n  const [state, setState] = useState(\"LOADING\");\n  useEffect(() => {\n    navigator.geolocation.watchPosition((geo) => {\n      const { longitude, latitude, accuracy, speed } = geo.coords;\n      setCoords({ longitude, latitude, accuracy, speed });\n      setState(\"YES\");\n    }, console.log);\n  }, []);\n\n  return (\n    <Container\n      state={state}\n      // onClick={() => setState(\"YES\")}\n      tabIndex=\"0\"\n      onKeyDown={e => {\n        if (e.key === \"ArrowUp\") setState(\"LOADING\");\n        if (e.key === \"ArrowRight\") setState(\"YES\");\n        if (e.key === \"ArrowDown\") setState(\"NO\");\n        if (e.key === \"ArrowLeft\") setState(\"MAYBE\");\n      }}\n    >\n      <SymbolContainer pending={state === \"LOADING\"}>\n        <MediumText content={copy[state][0]} />\n        <LargeText content={copy[state][1]} />\n        <Circle state={state} />\n        <div style={{ minHeight: 20}}><MediumText content={copy[state][2]} /></div>\n        <LargeText content={copy[state][3]} />\n        {/* <TestStreetInput /> */}\n        {coords && <TestCoordsInput latitude={coords.latitude} longitude={coords.longitude} />}\n      </SymbolContainer>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}